gasolina = 500 * 4,
mandado = 500 * 4,
gas = 600 / 2 )
camioneta = 7900
prestamo.banco = 6800
sum(casa, camioneta, prestamo.banco)
Martin = 13000
Ivan = 4000
Paramo = 1209
sum(Martin, Ivan, Paramo)
ingreso <- sum(Martin, Ivan, Paramo)
egreso <- sum(casa, camioneta, prestamo.banco)
Martin = 13000
Ivan = 4000
Paramo = 1209
ingreso <- sum(Martin, Ivan, Paramo)
ingreo-egreso
ingreao-egreso
ingreso-egreso
ingreso
casa <- c(Bancomer = 1300,
Santander = 1500,
telefonos = 450,
luz = 250,
agua = 100,
gasolina = 500 * 4,
mandado = 500 * 4,
gas = 600 / 2 ,
camiones = 900)
camioneta = 7900
prestamo.banco = 6800
egreso <- sum(casa, camioneta, prestamo.banco)
Martin = 13000
Ivan = 4000
Paramo = 1209
ingreso <- sum(Martin, Ivan, Paramo)
ingreso-egreso
#set working directory:
setwd("Documents/Documents-ehecatl/UFL/+UniversityofFlorida/++UF/+UF_classes/2019_Fall_TA/Shannon_code/Bob/")
#import file and secure to new short name:
z<-read.csv("microbiota SIT.csv", header = TRUE, na.strings = "na")
z
# load packages
install.packages("tidyr")
install.packages("dplyr")
install.packages("igraph")
install.packages("bipartite")
library("tidyr")
library("dplyr")
library("igraph")
library("bipartite")
#change data to wide format
widedata <- spread(z, Bacteria, prevelance)
widedata
rownames(widedata) <- widedata$treatment
#remove treatment column
widedata2 <- (widedata[,-1]) #remove treatment column
widedata2
#graph to incidence - transform to bipartite matrix
SITmicro <- graph_from_incidence_matrix(widedata2)
SITmicro
#Change shapes of treatment (square) and bacteria (curcle)
shapes = c(rep("square", length(V(SITmicro)$type[V(SITmicro)$type == "FALSE"])),
rep("circle", length(V(SITmicro)$type[V(SITmicro)$type == "TRUE"])))
#Change color of treatment node (green) and bacteria node (red)
V(SITmicro)$color <- c(rep("#046A38", length(V(SITmicro)$type[V(SITmicro)$type == "FALSE"])),
rep("#FA4616", length(V(SITmicro)$type[V(SITmicro)$type == "TRUE"])))
#plot graph of bipartite network
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', layout = layout_as_bipartite)
#alternative attempts
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex. layout = layout_as_bipartite, vertex.label.degree = pi)
#alternative attempts
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex. layout = layout_as_bipartite, vertex.label.degree = pi)
widedata2
# Impact through Networks: PLP 6701
#
# Introduction to R:
# Part 1: 2018-09-19
# R Alcala,
#
# R version 3.5.1 (2018-07-02) # check R.version
#---------------------------- SET PATH --------------------------------
setwd("/Users/ricardoialcala/Documents/Documents-ehecatl/UFL/+UniversityofFlorida/++UF/+UF_classes/2019_Fall_TA/Exercise_9_19_9/")
#---------------------------- LOAD LIBRARIES ----------------------------------
library(igraph)
library(bipartite)
#---------------------------- LOAD DATA ---------------------------------------
# Safariland: Plant pollinator data set
data(Safariland)
head(Safariland)
graph.incidence(Safariland) #Bipartite graphs have a ‘type’ vertex attribute in igraph
g <- graph_from_incidence_matrix(Safariland)
V(g)$name # Check the vertex names
V(g)$type # Check vertex types
plot(g, vertex.label.color='black', vertex.label.dist= ((V(g)$type * 4)-2)*-1  , layout = layout_as_bipartite)
plot(g,  vertex.label.color='black')
#
plot(SITmicro,  vertex.label.color='black')
#alternative attempts
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.layout = layout_as_bipartite, vertex.label.degree = pi)
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_kk(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_dh(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_drl(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_fr(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_gem(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_lgl(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_mds(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_mds(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_sugiyama(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_kk(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_kk(SITmicro, kkconst = 1))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_kk(SITmicro, kkconst = .1))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_kk(SITmicro, kkconst = 10))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_with_gem(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_as_star(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_as_tree(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_in_circle(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_nicely(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_on_grid(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout_randomly(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.layout=layout.auto(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.1 vertex.layout=layout.auto(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.1, vertex.layout=layout.auto(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.layout=layout.auto(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.layout=layout.circle(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout.circle(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout.bipartite(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout_as_bipartite(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout_as_bipartite)
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout_as_bipartite)
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, vertex.layout=layout_as_bipartite)
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, layout=layout_as_bipartite)
#
plot(SITmicro,  vertex.label.color='black', vertex.size=.5, vertex.label= NA, layout=layout_with_dh(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=1, vertex.label= NA, layout=layout_with_dh(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=1, vertex.label= NA, layout=layout_with_drl(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_drl(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_dh(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_fr(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_gem(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_graphopt(SITmicro))
#
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
SITmicro
V(SITmicro)$name
V(SITmicro)$type
V(SITmicro)
V(SITmicro)$color
E(SITmicro)
E(SITmicro)$size
E(SITmicro)$color
E(SITmicro)
SITmicro
widedata
# adding weights
E(SITmicro)$widht <- widedata2
widedata2
#graph to incidence - transform to bipartite matrix
SITmicro <- graph_from_incidence_matrix(widedata2, weighted = T)
SITmicro
#Change shapes of treatment (square) and bacteria (curcle)
shapes = c(rep("square", length(V(SITmicro)$type[V(SITmicro)$type == "FALSE"])),
rep("circle", length(V(SITmicro)$type[V(SITmicro)$type == "TRUE"])))
#Change color of treatment node (green) and bacteria node (red)
V(SITmicro)$color <- c(rep("#046A38", length(V(SITmicro)$type[V(SITmicro)$type == "FALSE"])),
rep("#FA4616", length(V(SITmicro)$type[V(SITmicro)$type == "TRUE"])))
#plot graph of bipartite network
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', layout = layout_as_bipartite)
#alternative attempts
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.layout = layout_as_bipartite, vertex.label.degree = pi)
# 3D layout
plot(SITmicro,  vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# adding weights
E(SITmicro)
E(SITmicro)$weight
log(E(SITmicro)$weight)
# adding weights
E(SITmicro)$width <- (E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# adding weights
E(SITmicro)$width <- log(E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# adding weights
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
log10_ceiling(E(SITmicro)$weight)
1/log10_ceiling(E(SITmicro)$weight)
log10_ceiling(E(SITmicro)$weight)
log10_ceiling(E(SITmicro)$weight)/100
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/100
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
?ceiling
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = 1))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = 2))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = 10))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = .1))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = 100))
?layout_with_kk
vcount(SITmicro)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = vcount(SITmicro)))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = vcount(SITmicro)*50))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = vcount(SITmicro)))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro, kkconst = vcount(SITmicro)*100))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
E(SITmicro)$width
?ceiling
E(SITmicro)$width
E(SITmicro)$weight
# Adding weights as width
E(SITmicro)$width <- log10(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
log10(E(SITmicro)$weight)
# Adding weights as width
E(SITmicro)$width <- log10(E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# Adding weights as width
E(SITmicro)$width <- log2(E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# Adding weights as width
E(SITmicro)$width <- log(E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
E(SITmicro)$width
10^(floor(log10(x)))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(floor(log10(x)))
}
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
10^(round(log10(x)))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(round(log10(x)))
}
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
10^(trunc(log10(x)))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(trunc(log10(x)))
}
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
10^(ceiling(log10(x)))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# check the result
log10_ceiling(E(SITmicro)$weight)
# check the result
E(SITmicro)$weight
# check the result
E(SITmicro)$weight
log10_ceiling(E(SITmicro)$weight)
log10(E(SITmicro)$weight)
log2(E(SITmicro)$weight)
E(SITmicro)$width <- log2(E(SITmicro)$weight)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
10^(ceiling(log2(x)))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(ceiling(log2(x)))
}
# check the result
E(SITmicro)$weight
log10_ceiling(E(SITmicro)$weight)
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# With ceillign you get  a single numeric argument x and returns a
#numeric vector containing the smallest integers not less than the
#corresponding elements of x.
# Function log 10 with ceilling
log10_ceiling <- function(x) {
10^(ceiling(log10(x)))
}
# check the result
E(SITmicro)$weight
log10_ceiling(E(SITmicro)$weight)
log2(E(SITmicro)$weight)
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# Adding weights as width
E(SITmicro)$width <- log10_ceiling(E(SITmicro)$weight)/1000
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_lgl(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_mds(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_sugiyama(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_sugiyama(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_dh(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_drl(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_fr(SITmicro))
?layout_with_kk
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
widedata2
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
#plot graph of bipartite network
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', layout = layout_as_bipartite)
#alternative attempts
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.layout = layout_as_bipartite, vertex.label.degree = pi)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.dist= ((V(g)$type * 4)-2)*-1
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.rotate=pi/2
,layout = layout_as_bipartite)
pi
pi/2
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.rotate=pi
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.rotate=pi/2
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.degree=pi/2
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.degree=pi
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.degree=190
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.degree=190
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.angle=190
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.angle=180
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', label.degree = -pi/4
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', label.degree = -pi/2
,layout = layout_as_bipartite)
V(g)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.dist= ((V(SITmicro)$type * 4)-2)*-1
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.dist= ((V(SITmicro)$type * 6)-2)*-1
,layout = layout_as_bipartite)
plot(SITmicro, vertex.shape=shapes, vertex.label.color='black', vertex.label.dist= ((V(SITmicro)$type * 6)-3)*-1
,layout = layout_as_bipartite)
igrap::plot
igraph::plot
igraph::plot
?plot
?igraph
tkplot(SITmicro, canvas.width = 450, canvas.height = 450, ...)
tkplot(SITmicro, canvas.width = 450, canvas.height = 450)
tkplot(SITmicro, canvas.width = 450, canvas.height = 450)
id <- tkplot(SITmicro, canvas.width = 450, canvas.height = 450)
canvas <- tk_canvas(id)
id <- tkplot(SITmicro, canvas.width = 450, canvas.height = 450)
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, vertex.label= NA, layout=layout_with_kk(SITmicro))
# 3D layout
plot(SITmicro,  edge.vertex.label.color='black', vertex.size=5, layout=layout_with_kk(SITmicro))
#load libraries
library(ggplot2);
library(plyr);
library(dplyr);
library(rnaturalearth);
library(gganimate);
library(gapminder);
library(gifski);
library(ggmap)
library(RColorBrewer)
#-
library(raster)
library(rgdal)
library(sp)
#download data
setwd('/Users/ricardoialcala/Documents/Documents-ehecatl/git_db/BiNeVi/scripts/Aswp_map/')
dp.Aswp <- read.csv("../../data/Sweetpotato_pan_african_metadata20190805.csv")
head(dp.Aswp)
names(dp.Aswp)
str(dp.Aswp)
dp.Aswp <- dp.Aswp[!is.na(dp.Aswp$Sampled_on),]
dp.Aswp <- dplyr::select(dp.Aswp, "No.ID", "Sampled_on", "Country", "Region", "District", "Locality", "Field_number",
"Latitude", "Longitude")
dp.Aswp <- dp.Aswp[dp.Aswp$Country != 0,]
world <- ne_countries(scale= 'medium',returnclass = 'sf') #retrieve map layer (uses rnaturalearth package)
library(rnaturalearth)
#-- Mapping World
ggplot(data = world)+
geom_sf()+
theme_bw()+
geom_point(data = dp.Aswp,  aes(x = Longitude, y = Latitude), size = 0.5, col = 'blue')+
theme(legend.position = 'none')+
theme(axis.title = element_blank()) #note: this only shows North American observations, since we restricted the iNaturalist observations to just those locations
#-- Adding key for ggmaps
register_google(key = "AIzaSyBWCi77yO5RSsjt6bcCQNEc2ejyDfVth_c")
has_google_key()
#-- Using ggmaps
ggplot(data = world)+
geom_sf(fill= "antiquewhite")+
theme_bw()+
theme(axis.title = element_blank(), axis.text = element_blank())+
theme()+
geom_point(data = dp.Aswp,
aes(x = Longitude, y = Latitude, col = Country), size= 1, shape = 0, alpha = 0.5)+
coord_sf(xlim = c(-15, 50), ylim = c(-32, 35))+
scale_color_viridis_d(option= "plasma")+
guides(unique(as.character(dp.Aswp$Country)), colour=guide_legend(title="Countries"), size = guide_legend(order = 10))
#download data
setwd('/Users/ricardoialcala/Documents/Documents-ehecatl/git_db/BiNeVi/scripts/Aswp_map/')
#download data
setwd('/Users/ricardoialcala/Documents/Documents-ehecatl/git_db/BiNeVi/scripts/Aswp_map/')
